name: Go CI/CD to Kind

on:
  push:
    branches:
      - master
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'deploy/**'
      - 'api/**'
      - 'pkg/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/cicd-pipeline.yaml'

jobs:
  # --- Job 1: 持续集成 (CI) - 负责代码质量检查 ---
  ci-check:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate diff
          clean: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: false # Disable caching to prevent conflicts on self-hosted runner

      - name: Run Go Tests
        run: go test -v ./...

      - name: Install and Run Go Linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          $(go env GOPATH)/bin/golangci-lint run ./...

  # --- Job 2: 持续部署 (CD) - 负责构建和部署 ---
  build-and-deploy:
    runs-on: self-hosted
    needs: ci-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate diff
          clean: true

      - name: Detect changed services
        id: changes
        run: |
          # Get changed files using git diff
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes detected. Exiting."
            echo "any_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Set initial state
          gateway_changed=false
          user_service_changed=false
          video_service_changed=false

          echo "Detected changed files:"
          echo "$CHANGED_FILES"

          # Define patterns for each service
          gateway_patterns=("cmd/gateway/" "internal/gateway/" "deploy/gateway/" "api/" "pkg/" "go.mod" "go.sum" ".github/workflows/cicd-pipeline.yaml")
          user_service_patterns=("cmd/user_service/" "internal/user/" "deploy/user-service/" "api/proto/v1/user.proto" "api/proto/v2/user.proto" "pkg/" "go.mod" "go.sum" ".github/workflows/cicd-pipeline.yaml")
          video_service_patterns=("cmd/video_service/" "internal/video/" "deploy/video-service/" "api/proto/v1/video.proto" "pkg/" "go.mod" "go.sum" ".github/workflows/cicd-pipeline.yaml")

          # Check each service
          while IFS= read -r file; do
            for pattern in "${gateway_patterns[@]}"; do
              if [[ "$file" == $pattern* ]]; then gateway_changed=true; fi
            done
            for pattern in "${user_service_patterns[@]}"; do
              if [[ "$file" == $pattern* ]]; then user_service_changed=true; fi
            done
            for pattern in "${video_service_patterns[@]}"; do
              if [[ "$file" == $pattern* ]]; then video_service_changed=true; fi
            done
          done <<< "$CHANGED_FILES"

          any_changed=false
          if [[ "$gateway_changed" == true || "$user_service_changed" == true || "$video_service_changed" == true ]]; then
            any_changed=true
          fi

          # Set outputs
          echo "gateway=$gateway_changed" >> $GITHUB_OUTPUT
          echo "user_service=$user_service_changed" >> $GITHUB_OUTPUT
          echo "video_service=$video_service_changed" >> $GITHUB_OUTPUT
          echo "any_changed=$any_changed" >> $GITHUB_OUTPUT
          echo "all_changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug changed files output
        if: always()
        run: |
          echo "--- Verifying changed-files script outputs ---"
          echo "any_changed: ${{ steps.changes.outputs.any_changed }}"
          echo "gateway_changed: ${{ steps.changes.outputs.gateway }}"
          echo "user_service_changed: ${{ steps.changes.outputs.user_service }}"
          echo "video_service_changed: ${{ steps.changes.outputs.video_service }}"
          echo "--------------------------------------------------"
          echo "All changed files detected by the script:"
          echo "${{ steps.changes.outputs.all_changed_files }}"

      # --- Build, Load, and Deploy changed services ---

      - name: Build and Load Gateway
        if: steps.changes.outputs.gateway == 'true'
        run: |
          echo "Building Gateway image..."
          docker build -t gateway:latest \
            --build-arg HTTP_PROXY=http://host.docker.internal:7897 \
            --build-arg HTTPS_PROXY=http://host.docker.internal:7897 \
            -f deploy/gateway/Dockerfile .
          echo "Loading Gateway image into Kind..."
          kind load docker-image gateway:latest --name dev-cluster

      - name: Build and Load User Service
        if: steps.changes.outputs.user_service == 'true'
        run: |
          echo "Building User Service image..."
          docker build -t user-service:latest \
            --build-arg HTTP_PROXY=http://host.docker.internal:7897 \
            --build-arg HTTPS_PROXY=http://host.docker.internal:7897 \
            -f deploy/user-service/Dockerfile .
          echo "Loading User Service image into Kind..."
          kind load docker-image user-service:latest --name dev-cluster

      - name: Build and Load Video Service
        if: steps.changes.outputs.video_service == 'true'
        run: |
          echo "Building Video Service image..."
          docker build -t video-service:latest \
            --build-arg HTTP_PROXY=http://host.docker.internal:7897 \
            --build-arg HTTPS_PROXY=http://host.docker.internal:7897 \
            -f deploy/video-service/Dockerfile .
          echo "Loading Video Service image into Kind..."
          kind load docker-image video-service:latest --name dev-cluster

      - name: Deploy services to Kubernetes
        if: steps.changes.outputs.any_changed == 'true'
        run: |
          echo "Deploying changed services to Kubernetes..."
          if [[ "${{ steps.changes.outputs.gateway }}" == "true" ]]; then
            echo "Deploying Gateway..."
            kubectl delete -f deploy/gateway/kubernetes/gateway.yaml
            kubectl apply -f deploy/gateway/kubernetes/gateway.yaml
          fi
          if [[ "${{ steps.changes.outputs.user_service }}" == "true" ]]; then
            echo "Deploying User Service..."
            kubectl delete -f deploy/user-service/kubernetes/user-service.yaml
            kubectl apply -f deploy/user-service/kubernetes/user-service.yaml
          fi
          if [[ "${{ steps.changes.outputs.video_service }}" == "true" ]]; then
            echo "Deploying Video Service..."
            kubectl delete -f deploy/video-service/kubernetes/video-service.yaml
            kubectl apply -f deploy/video-service/kubernetes/video-service.yaml
          fi
